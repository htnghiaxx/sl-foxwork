// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/widgets/loading/LoadingWrapper showing content with children 1`] = `
<Memo(LoadingWrapper)
  loading={false}
>
  text
</Memo(LoadingWrapper)>
`;

exports[`components/widgets/loading/LoadingWrapper showing content without children 1`] = `
<Memo(LoadingWrapper)
  loading={false}
/>
`;

exports[`components/widgets/loading/LoadingWrapper showing spinner with text 1`] = `
<Memo(LoadingWrapper)
  loading={true}
  text="test"
>
  <injectIntl(LoadingSpinner)
    text="test"
  >
    <LoadingSpinner
      intl={
        Object {
          "$t": [Function],
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "defaultRichTextElements": undefined,
          "fallbackOnEmptyString": true,
          "formatDate": [Function],
          "formatDateTimeRange": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatListToParts": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {},
          "onError": [Function],
          "onWarn": [Function],
          "textComponent": "span",
          "timeZone": "Etc/UTC",
          "wrapRichTextChunksInFragment": undefined,
        }
      }
      text="test"
    >
      <span
        className="LoadingSpinner with-text"
        data-testid="loadingSpinner"
        id="loadingSpinner"
      >
        <span
          className="fa fa-spinner fa-fw fa-pulse spinner"
          title="Loading Icon"
        />
        test
      </span>
    </LoadingSpinner>
  </injectIntl(LoadingSpinner)>
</Memo(LoadingWrapper)>
`;

exports[`components/widgets/loading/LoadingWrapper showing spinner without text 1`] = `
<Memo(LoadingWrapper)
  loading={true}
>
  <injectIntl(LoadingSpinner)
    text={null}
  >
    <LoadingSpinner
      intl={
        Object {
          "$t": [Function],
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "defaultRichTextElements": undefined,
          "fallbackOnEmptyString": true,
          "formatDate": [Function],
          "formatDateTimeRange": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatListToParts": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {},
          "onError": [Function],
          "onWarn": [Function],
          "textComponent": "span",
          "timeZone": "Etc/UTC",
          "wrapRichTextChunksInFragment": undefined,
        }
      }
      text={null}
    >
      <span
        className="LoadingSpinner"
        data-testid="loadingSpinner"
        id="loadingSpinner"
      >
        <span
          className="fa fa-spinner fa-fw fa-pulse spinner"
          title="Loading Icon"
        />
      </span>
    </LoadingSpinner>
  </injectIntl(LoadingSpinner)>
</Memo(LoadingWrapper)>
`;
